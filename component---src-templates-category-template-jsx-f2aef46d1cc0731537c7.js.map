{"version":3,"sources":["webpack:///./src/components/Pagination/PaginationItem.jsx","webpack:///./src/components/Pagination/Pagination.jsx","webpack:///./src/templates/category-template.jsx"],"names":["PaginationItem","props","value","index","currentPage","pathPrefix","pathPrefixPagination","isLeft","isRight","to","AutoLink","className","activeClassName","icon","size","Pagination","totalPages","extraClass","respArr","i","push","MAX_PAGINATION_ITEMS","map","key","CategoryTemplate","data","pageContext","category","categoryList","tagList","latestPostEdges","postEdges","allMarkdownRemark","edges","postList","getPostList","content","hasThumbnail","config","categoryHasThumbnail","hasLoadmore","getCategoryPath","sidebar","links","sidebarLinks","title","categoryHeader","siteTitle"],"mappings":"+IAwCeA,EApCQ,SAACC,GAAW,IACzBC,EAAgED,EAAhEC,MAAOC,EAAyDF,EAAzDE,MAAOC,EAAkDH,EAAlDG,YAAaC,EAAqCJ,EAArCI,WAAYC,EAAyBL,EAAzBK,qBACzCC,EAAmB,IAAVL,GAAeC,EAAQC,EAAc,EAC9CI,EAAoB,IAAVN,GAAeC,EAAQC,EAAc,EAEjDK,EAAKJ,EAUT,OARIE,EACFE,GAASH,EAAP,KAA+BF,EAAc,GACtCI,EACTC,GAASH,EAAP,KAA+BF,EAAc,GAC5B,IAAVF,IACTO,GAASH,EAAP,IAA+BJ,GAIjC,kBAACQ,EAAA,EAAD,CACED,GAAIA,EACJE,UAAS,oBAAqBP,IAAgBF,EAAQ,SAAW,IACjEU,gBAAgB,UAEfL,GACC,kBAAC,IAAD,CAAiBM,KAAM,CAAC,MAAO,qBAAsBC,KAAK,OAGlD,GAATZ,GACCA,EAGDM,GACC,kBAAC,IAAD,CAAiBK,KAAM,CAAC,MAAO,sBAAuBC,KAAK,S,UC6BpDC,IA9CI,SAACd,GAAW,IAE3BG,EACEH,EADFG,YAAaY,EACXf,EADWe,WAAYX,EACvBJ,EADuBI,WAAYC,EACnCL,EADmCK,qBAAsBW,EACzDhB,EADyDgB,WAGvDC,EAAU,GAChB,GAAIF,GAlBuB,EAmBzB,IAAI,IAAIG,EAAI,EAAGA,GAAKH,EAAYG,IAC9BD,EAAQE,KAAKD,QAEV,GAAIf,GAAe,EAAG,CAC3B,IAAI,IAAIe,EAAI,EAAGA,GAAKE,EAA0BF,IAC5CD,EAAQE,KAAKD,GAEfD,EAAQE,KAAK,EAAGJ,QACX,GAAIA,EAAaZ,EAAc,EAAG,CACvCc,EAAQE,KAAK,EAAG,GAChB,IAAK,IAAID,EAAIH,EAAa,EAAGG,GAAKH,EAAYG,IAC5CD,EAAQE,KAAKD,QAGfD,EAAQE,KAAK,EAAG,EAAGhB,EAAc,EAAGA,EAAaA,EAAc,EAAG,EAAGY,GAGvE,OACE,oCACCA,GAAc,GACb,yBAAKL,UAAS,wBAA0BM,GAEpCC,EAAQI,KAAI,SAACpB,EAAOC,GAAR,OACV,kBAAC,EAAD,CACEoB,IAAQlB,EAAL,IAAmBF,EACtBD,MAAOA,EACPC,MAAOA,EACPC,YAAaA,EACbC,WAAYA,EACZC,qBAAsBA,W,yDCrDpC,8JAsDekB,UA1CU,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAE9BC,EACED,EADFC,SAAUC,EACRF,EADQE,aAAcC,EACtBH,EADsBG,QAASC,EAC/BJ,EAD+BI,gBAAiB1B,EAChDsB,EADgDtB,YAAaY,EAC7DU,EAD6DV,WAE3De,EAAYN,EAAKO,kBAAkBC,MACnCC,EAAWC,YAAYJ,GACvBK,EACJ,oCACE,kBAAC,IAAD,CACEF,SAAUA,EACVG,aAAcC,IAAOC,qBACrBC,aAAa,IAEf,kBAAC,IAAD,CACEvB,WAAW,8BACXb,YAAaA,EACbY,WAAYA,EACZX,WAAYoC,YAAgBd,GAC5BrB,qBAAsBgC,IAAOhC,wBAI7BoC,EACJ,kBAAC,IAAD,CACEb,QAASA,EACTD,aAAcA,EACdE,gBAAiBA,EACjBa,MAAOL,IAAOM,eAIlB,OACE,kBAAC,IAAD,KACE,yBAAKjC,UAAU,sBACb,kBAAC,IAAD,CAAQkC,MAAUP,IAAOQ,eAAZ,IAA8BnB,EAA9B,MAA4CW,IAAOS,YAChE,kBAAC,IAAD,CAAQF,MAAUP,IAAOQ,eAAZ,IAA8BnB,IAC3C,kBAAC,IAAD,CAAeS,QAASA,EAASM,QAASA","file":"component---src-templates-category-template-jsx-f2aef46d1cc0731537c7.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport AutoLink from \"../AutoLink/AutoLink\";\n\nconst PaginationItem = (props) => {\n  const { value, index, currentPage, pathPrefix, pathPrefixPagination } = props;\n  const isLeft = value === 0 && index < currentPage / 2;\n  const isRight = value === 0 && index > currentPage / 2;\n\n  let to = pathPrefix;\n\n  if (isLeft) {\n    to += `${pathPrefixPagination}/${currentPage - 3}`\n  } else if (isRight) {\n    to += `${pathPrefixPagination}/${currentPage + 3}`\n  } else if (value !== 1) {\n    to += `${pathPrefixPagination}/${value}` \n  }\n\n  return (\n    <AutoLink \n      to={to} \n      className={`pagination-item ${currentPage === value ? \"active\" : \"\"}`}\n      activeClassName=\"active\"\n    >\n      {isLeft && (\n        <FontAwesomeIcon icon={[\"fas\", \"angle-double-left\"]} size=\"xs\" />\n      )}\n\n      {value != 0 && (\n        value\n      )}\n\n      {isRight && (\n        <FontAwesomeIcon icon={[\"fas\", \"angle-double-right\"]} size=\"xs\" />\n      )}\n    </AutoLink>\n  )\n}\n\nexport default PaginationItem;\n","import React from \"react\";\nimport PaginationItem from \"./PaginationItem\";\nimport \"./Pagination.scss\";\n\n// condition: totalPages >= 2\nconst MAX_PAGINATION_ITEMS = 7;\n\n// For example: there is 9 pages\n// [1], 2, 3, 4, 5, 0, 9\n// 1, [2], 3, 4, 5, 0, 9\n// 1, 2, [3], 4, 5, 0, 9\n// 1, 2, 3, [4], 5, 0, 9\n// 1, 0, 4, [5], 6, 0, 9\n// 1, 0, 5, [6], 7, 8, 9\n// 1, 0, 5, 6, [7], 8, 9\n// 1, 0, 5, 6, 7, [8], 9\n// 1, 0, 5, 6, 7, 8, [9]\nconst Pagination = (props) => {\n  const { \n    currentPage, totalPages, pathPrefix, pathPrefixPagination, extraClass \n  } = props;\n\n  const respArr = [];\n  if (totalPages <= MAX_PAGINATION_ITEMS) {\n    for(let i = 1; i <= totalPages; i++) {\n      respArr.push(i);\n    }\n  } else if (currentPage <= 4) {\n    for(let i = 1; i <= MAX_PAGINATION_ITEMS - 2; i++) {\n      respArr.push(i);\n    }\n    respArr.push(0, totalPages);\n  } else if (totalPages - currentPage < 4) {\n    respArr.push(1, 0);\n    for (let i = totalPages - 4; i <= totalPages; i++) {\n      respArr.push(i);\n    }\n  } else {\n    respArr.push(1, 0, currentPage - 1, currentPage, currentPage + 1, 0, totalPages);\n  }\n  \n  return (\n    <>\n    {totalPages >= 2 && (\n      <div className={`pagination-container ${extraClass}`}>\n        {\n          respArr.map((value, index) => (\n            <PaginationItem \n              key={`${pathPrefix}-${index}`} \n              value={value} \n              index={index}\n              currentPage={currentPage}\n              pathPrefix={pathPrefix}\n              pathPrefixPagination={pathPrefixPagination}\n            />\n          ))\n        }\n      </div>\n    )}\n    </>\n  )\n}\n\nexport default Pagination;","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport Header from \"../components/Header/Header\";\nimport MainContainer from \"../components/MainContainer/MainContainer\";\nimport Sidebar from \"../components/Sidebar/Sidebar\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport Pagination from \"../components/Pagination/Pagination\";\nimport { getPostList, getCategoryPath } from \"../utils/helpers\";\nimport config from \"../../data/SiteConfig\";\n\nconst CategoryTemplate = ({ data, pageContext }) => {\n  const { \n    category, categoryList, tagList, latestPostEdges, currentPage, totalPages \n  } = pageContext;\n  const postEdges = data.allMarkdownRemark.edges;\n  const postList = getPostList(postEdges);\n  const content = (\n    <>\n      <PostListing \n        postList={postList} \n        hasThumbnail={config.categoryHasThumbnail} \n        hasLoadmore={false} \n      />\n      <Pagination \n        extraClass=\"margin-top padding-top-half\"\n        currentPage={currentPage}\n        totalPages={totalPages}\n        pathPrefix={getCategoryPath(category)}\n        pathPrefixPagination={config.pathPrefixPagination}\n      />\n    </>\n  );\n  const sidebar = (\n    <Sidebar \n      tagList={tagList} \n      categoryList={categoryList} \n      latestPostEdges={latestPostEdges}\n      links={config.sidebarLinks}\n    />\n  );\n\n  return (\n    <Layout>\n      <div className=\"category-container\">\n        <Helmet title={`${config.categoryHeader} ${category} - ${config.siteTitle}`} />\n        <Header title={`${config.categoryHeader} ${category}`} />\n        <MainContainer content={content} sidebar={sidebar} />\n      </div>\n    </Layout>\n  );\n}\n\nexport default CategoryTemplate;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String, $skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      limit: $limit,\n      skip: $skip,\n      sort: { \n        fields: [fields___date], \n        order: DESC \n      }\n      filter: { \n        frontmatter: { \n          categories: { in: [$category] }, \n          template: { eq: \"post\" } \n        } \n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            categories\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 660, quality: 100) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}