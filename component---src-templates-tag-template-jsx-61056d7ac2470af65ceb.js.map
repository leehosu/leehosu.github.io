{"version":3,"sources":["webpack:///./src/components/Pagination/PaginationItem.jsx","webpack:///./src/components/Pagination/Pagination.jsx","webpack:///./src/templates/tag-template.jsx"],"names":["PaginationItem","props","value","index","currentPage","pathPrefix","pathPrefixPagination","isLeft","isRight","to","React","createElement","AutoLink","className","activeClassName","FontAwesomeIcon","icon","size","Pagination","totalPages","extraClass","respArr","i","push","MAX_PAGINATION_ITEMS","Fragment","map","key","TagTemplate","_ref","data","pageContext","tag","tagList","categoryList","latestPostEdges","postEdges","allMarkdownRemark","edges","postList","getPostList","content","PostListing","hasThumbnail","config","tagHasThumbnail","hasLoadmore","getTagPath","sidebar","Sidebar","links","sidebarLinks","Layout","Helmet","title","tagHeader","siteTitle","Header","MainContainer"],"mappings":"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","file":"component---src-templates-tag-template-jsx-61056d7ac2470af65ceb.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport AutoLink from \"../AutoLink/AutoLink\";\n\nconst PaginationItem = (props) => {\n  const { value, index, currentPage, pathPrefix, pathPrefixPagination } = props;\n  const isLeft = value === 0 && index < currentPage / 2;\n  const isRight = value === 0 && index > currentPage / 2;\n\n  let to = pathPrefix;\n\n  if (isLeft) {\n    to += `${pathPrefixPagination}/${currentPage - 3}`\n  } else if (isRight) {\n    to += `${pathPrefixPagination}/${currentPage + 3}`\n  } else if (value !== 1) {\n    to += `${pathPrefixPagination}/${value}` \n  }\n\n  return (\n    <AutoLink \n      to={to} \n      className={`pagination-item ${currentPage === value ? \"active\" : \"\"}`}\n      activeClassName=\"active\"\n    >\n      {isLeft && (\n        <FontAwesomeIcon icon={[\"fas\", \"angle-double-left\"]} size=\"xs\" />\n      )}\n\n      {value != 0 && (\n        value\n      )}\n\n      {isRight && (\n        <FontAwesomeIcon icon={[\"fas\", \"angle-double-right\"]} size=\"xs\" />\n      )}\n    </AutoLink>\n  )\n}\n\nexport default PaginationItem;\n","import React from \"react\";\nimport PaginationItem from \"./PaginationItem\";\nimport \"./Pagination.scss\";\n\n// condition: totalPages >= 2\nconst MAX_PAGINATION_ITEMS = 7;\n\n// For example: there is 9 pages\n// [1], 2, 3, 4, 5, 0, 9\n// 1, [2], 3, 4, 5, 0, 9\n// 1, 2, [3], 4, 5, 0, 9\n// 1, 2, 3, [4], 5, 0, 9\n// 1, 0, 4, [5], 6, 0, 9\n// 1, 0, 5, [6], 7, 8, 9\n// 1, 0, 5, 6, [7], 8, 9\n// 1, 0, 5, 6, 7, [8], 9\n// 1, 0, 5, 6, 7, 8, [9]\nconst Pagination = (props) => {\n  const { \n    currentPage, totalPages, pathPrefix, pathPrefixPagination, extraClass \n  } = props;\n\n  const respArr = [];\n  if (totalPages <= MAX_PAGINATION_ITEMS) {\n    for(let i = 1; i <= totalPages; i++) {\n      respArr.push(i);\n    }\n  } else if (currentPage <= 4) {\n    for(let i = 1; i <= MAX_PAGINATION_ITEMS - 2; i++) {\n      respArr.push(i);\n    }\n    respArr.push(0, totalPages);\n  } else if (totalPages - currentPage < 4) {\n    respArr.push(1, 0);\n    for (let i = totalPages - 4; i <= totalPages; i++) {\n      respArr.push(i);\n    }\n  } else {\n    respArr.push(1, 0, currentPage - 1, currentPage, currentPage + 1, 0, totalPages);\n  }\n  \n  return (\n    <>\n    {totalPages >= 2 && (\n      <div className={`pagination-container ${extraClass}`}>\n        {\n          respArr.map((value, index) => (\n            <PaginationItem \n              key={`${pathPrefix}-${index}`} \n              value={value} \n              index={index}\n              currentPage={currentPage}\n              pathPrefix={pathPrefix}\n              pathPrefixPagination={pathPrefixPagination}\n            />\n          ))\n        }\n      </div>\n    )}\n    </>\n  )\n}\n\nexport default Pagination;","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport Header from \"../components/Header/Header\";\nimport MainContainer from \"../components/MainContainer/MainContainer\";\nimport Sidebar from \"../components/Sidebar/Sidebar\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport Pagination from \"../components/Pagination/Pagination\";\nimport { getPostList, getTagPath } from \"../utils/helpers\";\nimport config from \"../../data/SiteConfig\";\n\nconst TagTemplate = ({ data, pageContext}) => {\n  const { \n    tag, tagList, categoryList, latestPostEdges, currentPage, totalPages \n  } = pageContext;\n  const postEdges = data.allMarkdownRemark.edges;\n  const postList = getPostList(postEdges);\n  const content = (\n    <>\n      <PostListing \n        postList={postList} \n        hasThumbnail={config.tagHasThumbnail} \n        hasLoadmore={false} \n      />\n      <Pagination \n        extraClass=\"margin-top padding-top-half\"\n        currentPage={currentPage}\n        totalPages={totalPages}\n        pathPrefix={getTagPath(tag)}\n        pathPrefixPagination={config.pathPrefixPagination}\n      />\n    </>\n  )\n  const sidebar = (\n    <Sidebar \n      tagList={tagList} \n      categoryList={categoryList} \n      latestPostEdges={latestPostEdges}\n      links={config.sidebarLinks}\n    />\n  );\n\n  return (\n    <Layout>\n      <div className=\"tag-container\">\n        <Helmet title={`${config.tagHeader} ${tag} - ${config.siteTitle}`} />\n        <Header title={`${config.tagHeader} ${tag}`} />\n        <MainContainer content={content} sidebar={sidebar} />\n      </div>\n    </Layout>\n  );\n}\n\nexport default TagTemplate;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query TagPage($tag: String, $skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      limit: $limit\n      skip: $skip\n      sort: { \n        fields: [fields___date], \n        order: DESC \n      }\n      filter: { \n        frontmatter: { \n          tags: { in: [$tag] }, \n          template: { eq: \"post\" } \n        } \n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            categories\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 660, quality: 100) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}